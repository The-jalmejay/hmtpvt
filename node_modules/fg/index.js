'use strict';

var Promise = require('bluebird');
var pg = Promise.promisifyAll(require('pg'));
var bricks = require('sql-bricks-postgres');

var queryWrap = function (client) {
  return function (stmt) {
    return client.queryAsync(typeof stmt === 'string' ? stmt : stmt.toParams());
  };
};

var cursorWrap = function (client) {
  return function (name, query) {
    var stmt = typeof query === 'string' ? query : query.toParams();
    var prefix = ['declare', name, 'cursor', 'for'];
    if (typeof stmt === 'string') {
      stmt = prefix.concat(stmt).join(' ');
    } else {
      stmt.text = prefix.concat(stmt.text).join(' ');
    }
    return client.queryAsync(stmt)
    .then(function () {
      return {
        next: function () {
          return client.queryAsync('fetch next from ' + name);
        },
        prev: function () {
          return client.queryAsync('fetch prior from ' + name);
        },
        fetch: function (n) {
          return client.queryAsync('fetch ' + n + ' from ' + name);
        }
      };
    })
    .disposer(function () {
      return client.queryAsync('close ' + name);
    });
  };
};

var wrapClient = function (client) {
  Promise.promisifyAll(client);
  return {
    query:  queryWrap(client),
    sql:    bricks,
    cursor: cursorWrap(client)
  };
};

var Fg = module.exports = function (config) {
  this.config = config;
};

Fg.prototype.connection = function () {
  var close;
  return pg.connectAsync(this.config)
  .spread(function (client, done) {
    close = done;
    return wrapClient(client);
  })
  .disposer(function (client) {
    if (close) {
      close(client);
    }
  });
};

Fg.prototype.transaction = function () {
  var close;
  return pg.connectAsync(this.config)
  .spread(function (client, done) {
    close = done;
    return client.queryAsync('begin').return(wrapClient(client));
  })
  .disposer(function (client, promise) {
    return client.query(promise.isFulfilled() ? 'commit' : 'end')
    .then(function () {
      if (close) {
        close(client);
      }
    });
  });
};
